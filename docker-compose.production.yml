version: '3.8'

# LiveDisplay Enterprise - Production Docker Compose Configuration
# Complete production-ready stack with all services

services:
  # ================================
  # APPLICATION SERVICES
  # ================================
  
  # Main Application Server
  livedisplay-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    image: livedisplay/server:2.0.0
    container_name: livedisplay-server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-livedisplay_production}
      - DB_USER=${DB_USER:-livedisplay}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    ports:
      - "4000:4000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_backups:/app/backups
    networks:
      - livedisplay-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.livedisplay-api.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.livedisplay-api.tls=true"
      - "traefik.http.routers.livedisplay-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.livedisplay-api.loadbalancer.server.port=4000"

  # Frontend Application (if serving from Docker)
  livedisplay-client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    image: livedisplay/client:2.0.0
    container_name: livedisplay-client
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.${DOMAIN:-localhost}
    ports:
      - "3000:80"
    networks:
      - livedisplay-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.livedisplay-web.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.livedisplay-web.tls=true"
      - "traefik.http.routers.livedisplay-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.livedisplay-web.loadbalancer.server.port=80"

  # ================================
  # DATABASE SERVICES
  # ================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: livedisplay-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-livedisplay_production}
      - POSTGRES_USER=${DB_USER:-livedisplay}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/src/migrations:/docker-entrypoint-initdb.d
      - postgres_backups:/backups
    networks:
      - livedisplay-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-livedisplay} -d ${DB_NAME:-livedisplay_production}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: livedisplay-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - livedisplay-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ================================
  # MONITORING & OBSERVABILITY
  # ================================
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: livedisplay-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - livedisplay-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: livedisplay-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN:-localhost}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - livedisplay-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitoring.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  # ================================
  # REVERSE PROXY & SSL
  # ================================
  
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: livedisplay-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/letsencrypt/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./monitoring/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - livedisplay-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # ================================
  # BACKUP & MAINTENANCE
  # ================================
  
  # Database Backup Service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local:15
    container_name: livedisplay-backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${DB_NAME:-livedisplay_production}
      - POSTGRES_USER=${DB_USER:-livedisplay}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=30
      - BACKUP_KEEP_WEEKS=8
      - BACKUP_KEEP_MONTHS=12
      - HEALTHCHECK_PORT=8080
    volumes:
      - postgres_backups:/backups
    networks:
      - livedisplay-network
    depends_on:
      postgres:
        condition: service_healthy

  # Log Management (Optional - Uncomment if needed)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
  #   container_name: livedisplay-elasticsearch
  #   restart: unless-stopped
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   networks:
  #     - livedisplay-network

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.8.0
  #   container_name: livedisplay-kibana
  #   restart: unless-stopped
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - livedisplay-network
  #   depends_on:
  #     - elasticsearch

# ================================
# NETWORKS
# ================================
networks:
  livedisplay-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# VOLUMES
# ================================
volumes:
  # Application Data
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  
  app_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/backups

  # Database Data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres-backups

  # Cache Data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis

  # Monitoring Data
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana

  # SSL Certificates
  traefik_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/letsencrypt

  # Log Data (Optional)
  # elasticsearch_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: ${DATA_PATH:-./data}/elasticsearch
